// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model ProjectDetails {
    id                   String   @id @default(cuid())
    name                 String
    poster               String
    icon                 String
    subtitle             String
    description          String[]
    technicalDescription String
    links                String[]
    qrCode               QrCode?
    video                String?
    videoPosition        Int?
    screenshots          String[]
    landscape            Boolean

    projectId String  @unique
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model QrCode {
    id  String @id @default(cuid())
    url String
    qr  String

    projectDetailsId String         @unique
    projectDetails   ProjectDetails @relation(fields: [projectDetailsId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Project {
    id        String @id @default(cuid())
    name      String
    poster    String
    position  Int
    sectionId String

    section Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    details ProjectDetails?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Section {
    id       String @id @default(cuid())
    name     String
    position Int

    projects Project[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
